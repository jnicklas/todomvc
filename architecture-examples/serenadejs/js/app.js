// Generated by CoffeeScript 1.4.0
(function() {
  var App, Controller, Todo, element, template,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Todo = (function(_super) {

    __extends(Todo, _super);

    function Todo() {
      return Todo.__super__.constructor.apply(this, arguments);
    }

    Todo.property('completed', {
      serialize: true
    });

    Todo.property('title', {
      serialize: true
    });

    Todo.property('incomplete', {
      dependsOn: 'completed',
      get: function() {
        return !this.completed;
      }
    });

    Todo.property('edit');

    Todo.property('classes', {
      dependsOn: ['completed', 'edit'],
      get: function() {
        return [this.edit ? 'editing' : void 0, this.completed ? 'completed' : void 0];
      }
    });

    return Todo;

  })(Serenade.Model);

  App = (function(_super) {

    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.localStorage = true;

    App.hasMany('todos', {
      serialize: true,
      as: function() {
        return Todo;
      }
    });

    App.selection('incompleteTodos', {
      from: 'todos',
      filter: 'incomplete'
    });

    App.selection('completedTodos', {
      from: 'todos',
      filter: 'completed'
    });

    App.property('left', {
      get: function() {
        if (this.incompleteTodosCount === 1) {
          return 'item left';
        } else {
          return 'items left';
        }
      }
    });

    App.property('allCompleted', {
      get: function() {
        return this.incompleteTodosCount === 0;
      },
      set: function(value) {
        var todo, _i, _len, _ref, _results;
        _ref = this.todos;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          todo = _ref[_i];
          _results.push(todo.completed = value);
        }
        return _results;
      }
    });

    App.property('newTitle');

    return App;

  })(Serenade.Model);

  Controller = (function() {

    function Controller(app) {
      this.app = app;
    }

    Controller.prototype.newTodo = function() {
      var title;
      title = this.app.newTitle.trim();
      if (title) {
        this.app.todos.push({
          title: title
        });
      }
      return this.app.newTitle = '';
    };

    Controller.prototype.clearCompleted = function() {
      return this.app.todos = this.app.incompleteTodos;
    };

    Controller.prototype.removeTodo = function(target, todo) {
      return this.app.todos["delete"](todo);
    };

    Controller.prototype.edit = function(target, todo, event) {
      todo.edit = true;
      this.field.focus();
      return this.field.select();
    };

    Controller.prototype.edited = function(target, todo) {
      if (todo.title.trim()) {
        if (todo.edit) {
          todo.edit = false;
        }
      } else {
        this.removeTodo(target, todo);
      }
      return this.app.save();
    };

    Controller.prototype.loadField = function(field) {
      this.field = field;
    };

    return Controller;

  })();

  template = document.getElementById('app').innerHTML;

  element = Serenade.view(template).render(App.find(1), Controller);

  document.body.insertBefore(element, document.body.children[0]);

}).call(this);
